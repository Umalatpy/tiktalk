Работайте в отдельной ветке от мастера.

git checkout master - перешли в мастер

git pull - обновились до последней версии

git checkout -b "moja-vetka" - создали свою ветку(бранч)

теперь работайте в ней как Вы и писали, только если хотите загрузить обновления с сервера, то пишите:

git pull master (загружайте обновления с мастера в свою ветку "moja-vetka")

Когда закончите - запуште на сервер

git push --set-upstream "moja-vetka"
Тогда Ваши изменения попадут на сервер в ветку с названием "moja-vetka" И уже на сервере, при необходимости смерджат Ваши изменения с мастером командой

git merge "moja-vetka" --no-ff

username Umalat19
login ZktNLJEV9P

shift - shift = быстрый поиск по файлам

@HostListener потренироваться с клик ивентом

npm start
это команда, чтобы выполнять скрипты из файла package.json, прописаны эти скрипты в стороке "scripts": {...}

чтобы каждый раз не создавались тестовые файлы (...spec.ts) при создании очередного компонента ангуляр, в файле angular.json находим "schematics":, в нем ищем "@schematics/angular:component": и добавляем еще один ключ "skipTests": true,
это будет работать только при создании компонентов, для других сущностей нужно также отдельно прописывать отказ от создания файла для тестов

вся работа в сервером, с сетью, выносится в ангуляре в отдельные сущности, которые называются сервисом, service

чтобы общаться с бэкэндом создается метод этого сервиса

методом называется исполняемая функция в компоненте (пример: getTestAccounts() {} )

методы в ангуляре прописываются внутри класса компонента

внутри класса также прописываются все переменные, которые в дальнейщем будут использоваться или внутри самой сущности или другими сущностями

также у каждого класса внутри сущности есть свой конструктор ( constructor() {...} ), в котором прописываются методы, исполняемые этой сущностью.

для того, чтобы взаимодействовать с бэкендом, для начала надо инжектировать сущность под названием HttpClient, а также его импортировать, чтобы он работал

Инжектирование - это, по простому, запрос у ангуляра определенной модули или сущности, которая нам нужна для работы

при необходимости запроса модуля у ангуляра, нам следует прописать этот самый модуль, в раздел providers: [...], в файле app.config.ts текущего проекта, чтобы этот модуль работал в нашем проекте

при инжектировании сущности необходимо его сохранить в переменную с соотвествующим ему названием

в каждой сущности для использования другой сущности нужно инжектировать ее с созданием соответствующей переменной для нее, для дальнейщего использования
